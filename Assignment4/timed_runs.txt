For the pthread version of the code.
Write the time measurments after different changes here:

For easy copypaste access: 
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 8
./a.out 3000 ../ref_output_data/ellipse_N_03000_after100steps.gal ../result.gal

--------------------------------------------------------------------------------------------------------

No parallelization, M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  1.78s user 0.01s system 99% cpu 1.784 total

--------------------------------------------------------------------------------------------------------
Feb 28th:

1 single thread for each Particle, M2. Still need to check if correct. Used around 4 cores and 25% cpu usage
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.99s user 33.98s system 176% cpu 21.525 total

After letting each thread calc for N/4 particles. Splitting work between threads more evenly. Using struct for input and particles. NUM_THREADS = 4. M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  2.51s user 0.01s system 390% cpu 0.645 total

Same as above but NUM_THREADS = 8, M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  2.83s user 0.03s system 592% cpu 0.483 total

Same as above but NUM_THREADS = 16, M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.01s user 0.04s system 653% cpu 0.467 total

Same as above but NUM_THREADS = 32, M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.06s user 0.07s system 690% cpu 0.453 total

All these runs could probably be made faster if i didn't have a bunch of stuff open + external monitor
Also higher variance compared to serialized code. Also have not parallelized update part yet.

After adding barrier inside each thread. NUM_THREADS = 32. Looks faster? But could be just me doing less stuff on computer. M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  2.98s user 0.07s system 705% cpu 0.432 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.08s user 0.07s system 700% cpu 0.450 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.09s user 0.07s system 702% cpu 0.449 total

--------------------------------------------------------------------------------------------------------
March 1:

After adding barrier inside each thread. NUM_THREADS = 32. Ran it again today for comparison. M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.06s user 0.13s system 697% cpu 0.457 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  2.99s user 0.15s system 655% cpu 0.479 total

After changing to creating threads once, and having a barrier between each timestep. Hard to tell if faster or no difference?
Still need to check corectness. M2
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.02s user 0.12s system 690% cpu 0.455 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  2.94s user 0.15s system 617% cpu 0.500 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.06s user 0.11s system 707% cpu 0.448 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0  3.07s user 0.12s system 714% cpu 0.446 total

March 2:

Pthreads and using the barrier. Using clang
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  3.03s user 0.04s system 730% cpu 0.421 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  3.12s user 0.04s system 718% cpu 0.440 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  3.14s user 0.04s system 730% cpu 0.436 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  3.10s user 0.04s system 685% cpu 0.458 total

Pthreads and using the barrier. Using gcc-12
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  4.50s user 0.05s system 705% cpu 0.645 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  4.45s user 0.05s system 666% cpu 0.675 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  4.42s user 0.04s system 704% cpu 0.634 total
./galsim 5000 input_data/ellipse_N_05000.gal 100 0.00001 0 16  4.49s user 0.05s system 692% cpu 0.655 total

Pthreads and using the barrier. Usign gcc-12. Now 10x more steps.
./galsim 5000 input_data/ellipse_N_05000.gal 1000 0.00001 0 16  44.10s user 0.40s system 715% cpu 6.223 total
./galsim 5000 input_data/ellipse_N_05000.gal 1000 0.00001 0 16  44.06s user 0.41s system 716% cpu 6.211 total

Pthreads and using the barrier. Usign clang. Now 10x more steps. Clang consistently better for me.
./galsim 5000 input_data/ellipse_N_05000.gal 1000 0.00001 0 16  30.45s user 0.32s system 741% cpu 4.152 total
./galsim 5000 input_data/ellipse_N_05000.gal 1000 0.00001 0 16  30.50s user 0.32s system 704% cpu 4.376 total
./galsim 5000 input_data/ellipse_N_05000.gal 1000 0.00001 0 16  30.44s user 0.33s system 729% cpu 4.220 total